#---
#modules:
#  - ruamel.yaml
#---
#code: yaml = ruamel.yaml
---
modules:
  - docassemble.assemblylinewizard.interview_generator
---
mandatory: True
code: |
  yaml_file
  results
---
question: |
  Upload a yaml file
fields:
  - Yaml file: yaml_file
    datatype: file
---
code: |
  import ruamel.yaml as yaml
  yaml_parsed = list(yaml.safe_load_all(yaml_file.slurp()))
---
code: |
  # identify all questions that set a variable in the interview
  # they will be added as a dictionary of label: field, with other modifiers
  fields_temp = []
  for doc in yaml_parsed:
    if doc:
      if 'fields' in doc:
        fields_temp.extend(doc.get('fields'))
      elif 'yesno' in doc:
        fields_temp.append({doc.get('question'): doc.get('yesno'), 'datatype':'yesno'})
      elif 'noyes' in doc:
        fields_temp.append({doc.get('question'): doc.get('noyes'), 'datatype':'noyes'})
      elif 'signature' in doc:
        fields_temp.append({doc.get('question'): doc.get('signature'), 'datatype': 'signature'})
      elif 'field' in doc:
        if 'choices' in doc or 'buttons' in doc:
          fields_temp.append({doc.get('question'): doc.get('field'), 'datatype': 'radio' })
        
  fields = fields_temp
  del fields_temp
---
code: |
  review_fields_temp = []
  for field in fields:
    # Identify the label/field pair
    for item in field.items():
      if not(item[0] in ['datatype','default', 'help', 'min','max','maxlength','minlength','rows','choices','input type','required','hint','code','exclude','none of the above','shuffle','show if','hide if','enable if','disable if','js show if','js hide if','js enable if','js disable if','disable others','note','html','field metadata','accept','validate','address autocomplete']):
        # this must be the field/label pair
        review = {}
        review['Edit'] = item[1]
        if field.get('datatype') == 'yesno':
          review['button'] = str(item[0]) + " : " + "${ word(yesno(" + str(item[1]) + ")) }"
        else:
          review['button'] = str(item[0]) + " : " + "${ " + str(item[1]) + " }"
        review_fields_temp.append(review)
        continue
  review_yaml = {'review': review_fields_temp}
---
code: |
  # import pyyaml
  # from yaml import dump
  from pyaml import dump
  review_yaml_dumped = dump(review_yaml, string_val_style='|')
---
event: results
question: |
  
subquestion: |  
  ${ indent_by(review_yaml_dumped,4) } 
  